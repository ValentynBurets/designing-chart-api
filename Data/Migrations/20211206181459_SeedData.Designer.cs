// <auto-generated />
using System;
using Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(DomainDbContext))]
    [Migration("20211206181459_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entity.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdLink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("Domain.Entity.Attempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Chart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Mark")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("StudentId");

                    b.ToTable("Attempts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0cd7fc69-dae4-4cab-9a39-6e360ad7dcd8"),
                            Chart = "created chart from student",
                            ExerciseId = new Guid("26f0d744-da7d-4241-893a-c80a16d922b1"),
                            FinishTime = new DateTime(2033, 5, 21, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Mark = 32.0,
                            StartTime = new DateTime(2033, 5, 21, 8, 30, 52, 0, DateTimeKind.Unspecified),
                            StudentId = new Guid("879d65a3-87ab-41ba-83cd-08d9b5dca1a1")
                        },
                        new
                        {
                            Id = new Guid("42e521f5-b8eb-4493-ae04-e7fd2b84c3da"),
                            Chart = "created chart from student",
                            ExerciseId = new Guid("26f0d744-da7d-4241-893a-c80a16d922b1"),
                            FinishTime = new DateTime(2033, 5, 21, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Mark = 62.0,
                            StartTime = new DateTime(2033, 5, 21, 8, 30, 52, 0, DateTimeKind.Unspecified),
                            StudentId = new Guid("879d65a3-87ab-41ba-83cd-08d9b5dca1a1")
                        },
                        new
                        {
                            Id = new Guid("fe208cc2-d5af-483f-a56b-d687ad544d1d"),
                            Chart = "created chart from student",
                            ExerciseId = new Guid("26e9767b-a372-4209-9800-ba07637fbe0e"),
                            FinishTime = new DateTime(2033, 5, 11, 10, 30, 52, 0, DateTimeKind.Unspecified),
                            Mark = 45.0,
                            StartTime = new DateTime(2033, 5, 11, 9, 25, 35, 0, DateTimeKind.Unspecified),
                            StudentId = new Guid("879d65a3-87ab-41ba-83cd-08d9b5dca1a1")
                        },
                        new
                        {
                            Id = new Guid("b42d7992-8e08-408e-85d9-8483c4c978d2"),
                            Chart = "created chart from student",
                            ExerciseId = new Guid("26f0d744-da7d-4241-893a-c80a16d922b1"),
                            FinishTime = new DateTime(2033, 6, 25, 7, 12, 23, 0, DateTimeKind.Unspecified),
                            Mark = 32.0,
                            StartTime = new DateTime(2033, 6, 25, 6, 32, 53, 0, DateTimeKind.Unspecified),
                            StudentId = new Guid("8ac2b3ac-1f7c-4ceb-6e4a-08d9b8d6db0e")
                        });
                });

            modelBuilder.Entity("Domain.Entity.CategoryType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("CategoryTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2afd1a8c-5912-45bd-9211-b5b4764fd4a8"),
                            Name = "CategoryType"
                        },
                        new
                        {
                            Id = new Guid("c0a1d593-2e33-4311-81ee-5e9d9cbc2304"),
                            Name = "SecondCategoryType"
                        });
                });

            modelBuilder.Entity("Domain.Entity.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EtalonChart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxMark")
                        .HasColumnType("int");

                    b.Property<int>("StatusType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = new Guid("26f0d744-da7d-4241-893a-c80a16d922b1"),
                            CategoryId = new Guid("2afd1a8c-5912-45bd-9211-b5b4764fd4a8"),
                            Description = "description for exercise",
                            EtalonChart = "test chart",
                            ExpirationDate = new DateTime(2000, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxMark = 100,
                            StatusType = 0,
                            Title = "exercise title"
                        },
                        new
                        {
                            Id = new Guid("26e9767b-a372-4209-9800-ba07637fbe0e"),
                            CategoryId = new Guid("c0a1d593-2e33-4311-81ee-5e9d9cbc2304"),
                            Description = "second description for exercise",
                            EtalonChart = "second test chart",
                            ExpirationDate = new DateTime(2042, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxMark = 200,
                            StatusType = 3,
                            Title = "second exercise title"
                        });
                });

            modelBuilder.Entity("Domain.Entity.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdLink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Studens");
                });

            modelBuilder.Entity("Domain.Entity.Attempt", b =>
                {
                    b.HasOne("Domain.Entity.Exercise", "Exercise")
                        .WithMany("Attempts")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Student", "Student")
                        .WithMany("Attempts")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entity.Exercise", b =>
                {
                    b.HasOne("Domain.Entity.CategoryType", "CategoryType")
                        .WithMany("Exercises")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryType");
                });

            modelBuilder.Entity("Domain.Entity.CategoryType", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("Domain.Entity.Exercise", b =>
                {
                    b.Navigation("Attempts");
                });

            modelBuilder.Entity("Domain.Entity.Student", b =>
                {
                    b.Navigation("Attempts");
                });
#pragma warning restore 612, 618
        }
    }
}
