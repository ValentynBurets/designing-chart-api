// <auto-generated />
using System;
using Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(DomainDbContext))]
    partial class DomainDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entity.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdLink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("Domain.Entity.Attempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Chart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Mark")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("StudentId");

                    b.ToTable("Attempts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00bb3458-8225-4906-a0b3-63a11d5685f1"),
                            Chart = "created chart from student",
                            ExerciseId = new Guid("c781315f-4af0-4c63-a6a3-31b87699f6a2"),
                            FinishTime = new DateTime(2033, 5, 21, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Mark = 32.0,
                            StartTime = new DateTime(2033, 5, 21, 8, 30, 52, 0, DateTimeKind.Unspecified),
                            StudentId = new Guid("1a32c7da-b8df-49eb-76e5-08d9b65ced36")
                        },
                        new
                        {
                            Id = new Guid("faa391c9-add3-4baa-9216-3c9365bf2a8b"),
                            Chart = "created 2 chart from student",
                            ExerciseId = new Guid("c781315f-4af0-4c63-a6a3-31b87699f6a2"),
                            FinishTime = new DateTime(2032, 5, 21, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Mark = 42.0,
                            StartTime = new DateTime(2032, 5, 21, 8, 30, 52, 0, DateTimeKind.Unspecified),
                            StudentId = new Guid("1a32c7da-b8df-49eb-76e5-08d9b65ced36")
                        },
                        new
                        {
                            Id = new Guid("3404f021-c85d-4e89-995e-8013291f9307"),
                            Chart = "created chart from student",
                            ExerciseId = new Guid("c09c4243-e647-4aa2-b117-9f3442f95e19"),
                            FinishTime = new DateTime(2033, 5, 11, 10, 30, 52, 0, DateTimeKind.Unspecified),
                            Mark = 45.0,
                            StartTime = new DateTime(2033, 5, 11, 9, 25, 35, 0, DateTimeKind.Unspecified),
                            StudentId = new Guid("1a32c7da-b8df-49eb-76e5-08d9b65ced36")
                        },
                        new
                        {
                            Id = new Guid("cb0fa235-ba05-4e71-977c-aff885dfb2d0"),
                            Chart = "created chart from student",
                            ExerciseId = new Guid("c781315f-4af0-4c63-a6a3-31b87699f6a2"),
                            FinishTime = new DateTime(2033, 6, 25, 7, 12, 23, 0, DateTimeKind.Unspecified),
                            Mark = 32.0,
                            StartTime = new DateTime(2033, 6, 25, 6, 32, 53, 0, DateTimeKind.Unspecified),
                            StudentId = new Guid("cd6c466a-6b9d-414b-6394-08d9ba292180")
                        });
                });

            modelBuilder.Entity("Domain.Entity.CategoryType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("CategoryTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e068e57b-ccfd-4ec5-8c70-20a7d7a2f636"),
                            Name = "CategoryType"
                        },
                        new
                        {
                            Id = new Guid("130d04d8-4623-4c11-8e35-67df14a0a891"),
                            Name = "SecondCategoryType"
                        });
                });

            modelBuilder.Entity("Domain.Entity.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EtalonChart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxMark")
                        .HasColumnType("int");

                    b.Property<int>("StatusType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c781315f-4af0-4c63-a6a3-31b87699f6a2"),
                            CategoryId = new Guid("e068e57b-ccfd-4ec5-8c70-20a7d7a2f636"),
                            Description = "description for exercise",
                            EtalonChart = "test chart",
                            ExpirationDate = new DateTime(2000, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxMark = 100,
                            StatusType = 0,
                            Title = "exercise title"
                        },
                        new
                        {
                            Id = new Guid("c09c4243-e647-4aa2-b117-9f3442f95e19"),
                            CategoryId = new Guid("130d04d8-4623-4c11-8e35-67df14a0a891"),
                            Description = "second description for exercise",
                            EtalonChart = "second test chart",
                            ExpirationDate = new DateTime(2042, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxMark = 200,
                            StatusType = 3,
                            Title = "second exercise title"
                        });
                });

            modelBuilder.Entity("Domain.Entity.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdLink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Studens");
                });

            modelBuilder.Entity("Domain.Entity.Attempt", b =>
                {
                    b.HasOne("Domain.Entity.Exercise", "Exercise")
                        .WithMany("Attempts")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Student", "Student")
                        .WithMany("Attempts")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entity.Exercise", b =>
                {
                    b.HasOne("Domain.Entity.CategoryType", "CategoryType")
                        .WithMany("Exercises")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryType");
                });

            modelBuilder.Entity("Domain.Entity.CategoryType", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("Domain.Entity.Exercise", b =>
                {
                    b.Navigation("Attempts");
                });

            modelBuilder.Entity("Domain.Entity.Student", b =>
                {
                    b.Navigation("Attempts");
                });
#pragma warning restore 612, 618
        }
    }
}
